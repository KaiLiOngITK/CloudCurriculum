version: '3'

services:
  user-services-database-postgres:
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./user-services-database-postgres:/var/lib/postgresql/data

  product-services-database-mongodb:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - ./mongodb-data:/data/db

  order-services-database-postgres:
    image: postgres:latest
    restart: always
    ports:
      - 5433:5433
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGPORT: 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./order-services-database-postgres:/var/lib/postgresql/data

  user-services:
    build:
      context: ./user-services
      dockerfile: Dockerfile
    environment:
      - POSTGRES_URI=postgresql://postgres:password@user-services-database-postgres:5432/postgres?sslmode=disable
    ports:
      - 8080:8080
    restart: always
    depends_on:
      - user-services-database-postgres

  product-services:
    build:
      context: ./product-services
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    environment:
      - MONGODB_HOST=product-services-database-mongodb
      - MONGODB_PORT=27017
    depends_on:
      - product-services-database-mongodb

  order-services:
    build:
      context: ./order-services
      dockerfile: Dockerfile
    environment:
      - POSTGRES_URI=postgresql://postgres:password@order-services-database-postgres:5433/postgres?sslmode=disable 
      - USER_SERVICE_HOST=user-services
      - USER_SERVICE_PORT=8080
      - PRODUCT_SERVICE_HOST=product-services
      - PRODUCT_SERVICE_PORT=8081
    ports:
      - 8082:8082
    restart: always
    depends_on:
      - order-services-database-postgres
      - rabbitmq

  # shipping-services:
  #   build: 
  #     context: ./shipping-services
  #     dockerfile: Dockerfile
  #   ports:
  #     - 8083:8083
  #   restart: always
  #   depends_on:
  #     - rabbitmq

  shipment-services:
    build: 
      context: ./shipment-services
      dockerfile: Dockerfile
    ports:
      - 8083:8083
    restart: always
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    # restart: always
    # networks:
    #   - rabbitmq_cloudcurriculum
    # healthcheck:
    #   test: ["CMD", "curl", "-u", "guest:guest", "rabbitmq:15672/api/overview"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
  
  nginx:
    image: nginx:alpine
    ports:
      - 80:80
    depends_on:
      - user-services
      - product-services
      - order-services
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    restart: always


volumes:
  user-services-database-postgres:
  mongodb-data:
  order-services-database-postgres:
  # rabbitmq:
  # nginx.conf:

# networks:
#   rabbitmq_cloudcurriculum:
#     driver: bridge
